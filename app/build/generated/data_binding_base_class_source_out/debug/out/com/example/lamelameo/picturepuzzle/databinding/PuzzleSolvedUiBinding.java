// Generated by view binder compiler. Do not edit!
package com.example.lamelameo.picturepuzzle.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import com.example.lamelameo.picturepuzzle.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PuzzleSolvedUiBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ConstraintLayout SolvedContainer;

  @NonNull
  public final Button newButton;

  @NonNull
  public final TextView puzzleBests;

  @NonNull
  public final TextView puzzleDataView;

  @NonNull
  public final Button retryButton;

  private PuzzleSolvedUiBinding(@NonNull ConstraintLayout rootView,
      @NonNull ConstraintLayout SolvedContainer, @NonNull Button newButton,
      @NonNull TextView puzzleBests, @NonNull TextView puzzleDataView,
      @NonNull Button retryButton) {
    this.rootView = rootView;
    this.SolvedContainer = SolvedContainer;
    this.newButton = newButton;
    this.puzzleBests = puzzleBests;
    this.puzzleDataView = puzzleDataView;
    this.retryButton = retryButton;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PuzzleSolvedUiBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PuzzleSolvedUiBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.puzzle_solved_ui, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PuzzleSolvedUiBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      ConstraintLayout SolvedContainer = (ConstraintLayout) rootView;

      id = R.id.newButton;
      Button newButton = rootView.findViewById(id);
      if (newButton == null) {
        break missingId;
      }

      id = R.id.puzzleBests;
      TextView puzzleBests = rootView.findViewById(id);
      if (puzzleBests == null) {
        break missingId;
      }

      id = R.id.puzzleDataView;
      TextView puzzleDataView = rootView.findViewById(id);
      if (puzzleDataView == null) {
        break missingId;
      }

      id = R.id.retryButton;
      Button retryButton = rootView.findViewById(id);
      if (retryButton == null) {
        break missingId;
      }

      return new PuzzleSolvedUiBinding((ConstraintLayout) rootView, SolvedContainer, newButton,
          puzzleBests, puzzleDataView, retryButton);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
